name: Build and Release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  release-mac:
    runs-on: macOS-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build Electron App for Mac
        run: npm run build:mac

      - name: Get version from package.json
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false

      - name: Create GitHub Release and Upload Build
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/minr-desktop-${{ env.PACKAGE_VERSION }}.dmg
          asset_name: minr-desktop-${{ env.PACKAGE_VERSION }}.dmg
          asset_content_type: application/octet-stream

  release-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Clear node_modules
        run: rmdir /s /q node_modules

      - name: Install dependencies
        run: npm install

      - name: Build Electron App for Windows
        run: npm run build:win

      - name: Get version from package.json
        run: $env:PACKAGE_VERSION = "$(node -p "require('./package.json').version")"
        shell: pwsh

      - name: Create release
        id: create_release_win
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false

      - name: Create GitHub Release and Upload Build
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_win.outputs.upload_url }}
          asset_path: ./dist/minr-desktop-${{ env.PACKAGE_VERSION }}-setup.exe
          asset_name: minr-desktop-${{ env.PACKAGE_VERSION }}-setup.exe
          asset_content_type: application/octet-stream

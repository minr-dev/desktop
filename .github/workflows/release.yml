name: Build and Release
on:
  push:
    tags:
      - '*'

env:
  APPLE_API_KEY_PATH: ./minr-api-key.p8
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-version:
    runs-on: ubuntu-24.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get version from package.json
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        shell: bash

      - name: Check if tag matches package version
        # タグ名とPACKAGE_VERSIONが一致していないと、ここの step でエラーになるので
        # package.json の version とタグを一致させること
        run: |
          if [ "refs/tags/${{ env.PACKAGE_VERSION }}" != "${{ github.ref }}" ]; then
            echo "Tag does not match package version!"
            exit 1
          fi

  build:
    needs: check-version
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2022, macos-13, macos-14] # ubuntu-24.04
        node-version: [18.x]
        include:
          - os: macos-13
            platform: mac
            ext: dmg
            arch: x64
          - os: macos-14
            platform: mac
            ext: dmg
            arch: arm64
          - os: windows-2022
            platform: win
            ext: exe
          # linux版は動作確認できないので見送り
          # - os: ubuntu-24.04
          #   platform: linux
          #   ext: AppImage

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # ネイティブモジュールの rebuild が実行されるときに、node_modules のディレクトリの
      # 削除に失敗して、よくエラーになる。
      # もしも、「Install dependencies」の step で、node_modules 配下のディレクトリ削除で
      # エラーになるときには、 UI から「Re-run jobs」してください。
      # 一回、うまくいったら、キャッシュしてくれるので、エラーが出なくなるのだけど、
      # package-lock.json を変更するコミットがあると、キャッシュがクリアされるので、
      # エラーが出ることがあると思われる。
      # また、キャッシュした内容がおかしくてエラーになることもあるので、
      # job をキャンセルしたときなど、キャッシュが中途半端になってると、ビルドがうまくいかないので、
      # 「※キャッシュの強制削除」のところを有効にして、実行してみてほしい。
      - name: Cache dependencies
        # 元々windows版のリリースにのみ書かれていた処理のため
        if: startsWith(matrix.os,'windows')
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            C:\Users\runneradmin\AppData\Local\npm-cache
          key: ${{ runner.os }}-node-${{ hashFiles('**\package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # ※キャッシュの強制削除
      # - name: Clear node_modules if exists
      #   if: startsWith(matrix.os,'windows')
      #   run: |
      #     if (Test-Path node_modules) {
      #       Remove-Item -Recurse -Force node_modules
      #     }
      #   shell: pwsh

      # - name: Clear npm cache
      #   run: npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: create Apple API Key File
        if: startsWith(matrix.os,'macos')
        run: echo "${{ secrets.APPLE_API_KEY }}" > "${{ env.APPLE_API_KEY_PATH }}"
        shell: bash

      # 公証プロセスで失敗した場合、Re-run jobsでもう一度やると成功することがある
      - name: Build Electron App
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          GITHUB_CLIENT_ID: ${{ secrets.APP_GITHUB_CLIENT_ID }}

          CSC_LINK: ${{ secrets.MAC_CSC_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
          # GitHubのSecretsに登録するまでコメントアウト
          # WIN_CSC_LINK: ${{ secrets.WIN_CSC_BASE64 }}
          # WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

          APPLE_API_KEY: ${{ env.APPLE_API_KEY_PATH }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}

          DEBUG: electron-osx-sign*
        run: npm run build:${{ matrix.platform }}

      - name: delete Apple API Key File
        if: startsWith(matrix.os,'macos')
        run: rm -f ${{ env.APPLE_API_KEY_PATH }}
        shell: bash

      - name: Get version from package.json
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: ./dist/minr-desktop-${{ env.PACKAGE_VERSION }}-${{ matrix.platform }}-*.${{ matrix.ext }}

  release:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release and Upload Build
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: artifacts/**/*
